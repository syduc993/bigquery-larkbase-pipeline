import streamlit as st
import pandas as pd
from src.services.bigquery_service import BigQueryService
from src.services.larkbase_service import LarkbaseAuthenticator, LarkbaseDataWriter
from src.config.larkbase_config import LarkbaseConfig
from src.ui.styles import load_css, render_header, render_footer
from src.ui.components import (
    render_status_card, 
    render_data_preview, 
    render_query_builder,
    render_transfer_section
)

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="BigQuery to Larkbase",
    page_icon="üîÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

def main():
    # Load CSS v√† render header
    load_css()
    render_header()
    
    # Kh·ªüi t·∫°o services
    bigquery_service = BigQueryService()
    
    # Sidebar c·∫•u h√¨nh
    with st.sidebar:
        st.markdown("## ‚öôÔ∏è C·∫•u h√¨nh")
        
        # BigQuery Configuration
        st.markdown("### üîµ BigQuery")
        query = render_query_builder()
        
        # Larkbase Configuration
        st.markdown("### üü° Larkbase")
        app_token = st.text_input("App Token", help="Token ·ª©ng d·ª•ng Larkbase")
        table_id = st.text_input("Table ID", help="ID b·∫£ng trong Larkbase")
        
        # Advanced settings
        with st.expander("üîß C·∫•u h√¨nh n√¢ng cao"):
            custom_app_id = st.text_input("App ID")
            custom_app_secret = st.text_input("App Secret", type="password")
    
    # Main content
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("## üìä D·ªØ li·ªáu t·ª´ BigQuery")
        
        if st.button("üîç Xem tr∆∞·ªõc d·ªØ li·ªáu", type="primary"):
            with st.spinner("ƒêang truy v·∫•n BigQuery..."):
                df = bigquery_service.execute_query(query)
                
                if render_data_preview(df):
                    st.session_state['bigquery_data'] = df
                    st.markdown('<div class="status-success">‚úÖ Truy v·∫•n th√†nh c√¥ng!</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown("## üéØ Tr·∫°ng th√°i h·ªá th·ªëng")
        
        # BigQuery status
        bigquery_connected = bigquery_service.client is not None
        render_status_card("BigQuery", "K·∫øt n·ªëi" if bigquery_connected else "L·ªói", bigquery_connected)
        
        # Larkbase test
        if st.button("üß™ Test Larkbase"):
            config = LarkbaseConfig(
                app_id=custom_app_id if custom_app_id else None,
                app_secret=custom_app_secret if custom_app_secret else None
            )
            authenticator = LarkbaseAuthenticator(config)
            token = authenticator.authenticate()
            
            if token:
                st.session_state['larkbase_token'] = token
                st.session_state['larkbase_config'] = config
                st.markdown('<div class="status-success">‚úÖ Larkbase k·∫øt n·ªëi th√†nh c√¥ng!</div>', unsafe_allow_html=True)
    
    # Transfer section
    if render_transfer_section():
        # Validation
        if 'bigquery_data' not in st.session_state:
            st.error("‚ö†Ô∏è Vui l√≤ng truy v·∫•n d·ªØ li·ªáu BigQuery tr∆∞·ªõc!")
            return
        
        if not app_token or not table_id:
            st.error("‚ö†Ô∏è Vui l√≤ng nh·∫≠p App Token v√† Table ID!")
            return
        
        if 'larkbase_token' not in st.session_state:
            st.error("‚ö†Ô∏è Vui l√≤ng test k·∫øt n·ªëi Larkbase tr∆∞·ªõc!")
            return
        
        # Execute transfer
        df = st.session_state['bigquery_data']
        
        with st.spinner("ƒêang chuy·ªÉn d·ªØ li·ªáu..."):
            # Convert DataFrame to Larkbase format
            records = []
            for _, row in df.iterrows():
                record = {}
                for col in df.columns:
                    value = row[col]
                    if pd.isna(value):
                        record[col] = ""
                    else:
                        record[col] = str(value)
                records.append(record)
            
            # Write to Larkbase
            writer = LarkbaseDataWriter(
                st.session_state['larkbase_token'],
                st.session_state['larkbase_config']
            )
            
            success = writer.write_records(app_token, table_id, records)
            
            if success:
                st.success(f"‚úÖ ƒê√£ chuy·ªÉn th√†nh c√¥ng {len(records)} b·∫£n ghi sang Larkbase!")
                st.balloons()
                
                # Statistics
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("üìä T·ªïng b·∫£n ghi", len(records))
                with col2:
                    st.metric("‚è±Ô∏è Th·ªùi gian ∆∞·ªõc t√≠nh", f"{len(records)/100:.1f}s")
                with col3:
                    st.metric("‚úÖ Tr·∫°ng th√°i", "Th√†nh c√¥ng")
    
    render_footer()

if __name__ == "__main__":
    main()
